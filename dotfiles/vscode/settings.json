{
    // * * * STARTUP BEHAVIOUR
    //  - newUntitledFile: Open a new untitled file (only applies when opening an empty workspace).
    "workbench.startupEditor": "newUntitledFile",
    // * * * THEME
    // "workbench.colorTheme": "Gruvbox Dark (Medium)",
    // * * * DISABLE TELEMETRY
    "telemetry.telemetryLevel": "off",
    // Fetches experiments to run from a Microsoft online service.
    "workbench.enableExperiments": false,
    "update.mode": "none",
    "update.showReleaseNotes": false,
    "typescript.disableAutomaticTypeAcquisition": true,
    "extensions.autoCheckUpdates": false,
    "extensions.autoUpdate": false,
    "extensions.ignoreRecommendations": true,
    // "extensions.showRecommendationsOnlyOnDemand": true,
    "workbench.settings.enableNaturalLanguageSearch": false,
    "npm.fetchOnlinePackageInfo": false,
    // * * * * * * * * * * * * * * * * * * * * * * *
    // * * * TERMINALS * * * * * * * * * * * * * * *
    // * * * * * * * * * * * * * * * * * * * * * * *
    "terminal.integrated.fontFamily": "Inconsolata Nerd Font Mono",
    // "terminal.integrated.fontWeight": "bold",
    "terminal.integrated.drawBoldTextInBrightColors": true,
    // Whether or not to allow chord keybindings in the terminal.
    // Note that when this is true and the keystroke results in a chord it
    // will bypass `terminal.integrated.commandsToSkipShell`,
    // setting this to false is particularly useful when you want
    //  ctrl+k to go to your shell (not VS Code).
    "terminal.integrated.allowChords": false,
    "terminal.integrated.commandsToSkipShell": [
        // CTRL+SHIFT+P will trigger vscode
        "workbench.action.showCommands",
        // CTRL++P will go to terminal
        "-workbench.action.quickOpen",
        // disable CTRL+F (find in terminal)
        "-workbench.action.terminal.focusFind",
    ],
    // PROFILES is the new way of configure terminals
    "terminal.integrated.profiles.windows": {
        "bash": {
            "path": "C:\\usr\\bin\\bash.exe",
            "args": [
                "--login"
            ]
        },
        "PowerShell -NoProfile": {
            "source": "PowerShell",
            "args": [
                "-NoProfile"
            ]
        }
    },
    "terminal.integrated.defaultProfile.windows": "bash",
    "terminal.integrated.profiles.linux": {
        "zsh (login)": {
            "path": "zsh",
            "args": [
                "-l"
            ]
        }
    },
    // "terminal.integrated.defaultProfile.linux": "zsh (login)",
    //  EXCLUDE FILES FROM CTRL+P, watchfolder, etc
    "files.exclude": {
        "**/.venv/*/**": true
    },
    "files.watcherExclude": {
        "**/.git/objects/**": true,
        "**/.git/subtree-cache/**": true,
        "**/node_modules/*/**": true,
        "**/.venv/*/**": true
    },
    // * * * * * * * * * * * * * * * * * * * * * * *
    // * * * LANGUAGE FILES EXTRA  * * * * * * * * *
    // * * * * * * * * * * * * * * * * * * * * * * *
    "files.associations": {
        "*.tf": "hcl"
    },
    // * * * * * * * * * * * * * * * * * * * * * * *
    // * * * GIT CONFIG * * * * * * * * * * * * * * *
    // * * * * * * * * * * * * * * * * * * * * * * *
    // OS Dependent (WINDOWS)
    // "git.path": "C:\\Users\\EJOQ\\AppData\\Local\\Programs\\Git\\bin\\git.exe",
    // When enabled, commits will automatically be fetched from the default remote of the current Git repository.
    "git.autofetch": false,
    // Duration in seconds between each automatic git fetch, when `git.autofetch` is enabled.
    "git.autofetchPeriod": 180,
    // Whether auto refreshing is enabled.
    "git.autorefresh": false,
    // Configures when repositories should be automatically detected.
    //  - true: Scan for both subfolders of the current opened folder and parent folders of open files.
    //  - false: Disable automatic repository scanning.
    //  - subFolders: Scan for subfolders of the currently opened folder.
    //  - openEditors: Scan for parent folders of open files.
    "git.autoRepositoryDetection": true,
    // Stash any changes before pulling and restore them after successful pull.
    "git.autoStash": true,
    "git.confirmSync": false,
    // * * * * * * * * * * * * * * * * * * * * * * *
    // * * * EDITOR CONFIG * * * * * * * * * * * * *
    // * * * * * * * * * * * * * * * * * * * * * * *
    "editor.autoIndent": "advanced",
    "editor.tabSize": 4,
    "[terraform]": {
        // Shorter tab-size is standard for terraform
        "editor.tabSize": 2
    },
    "editor.insertSpaces": true,
    "editor.selectionHighlight": false,
    "editor.occurrencesHighlight": false,
    "editor.fontFamily": "'SauceCodePro Nerd Font','Inconsolata Nerd Font Mono','Inconsolata Nerd Font','Droid Sans Mono', 'monospace', monospace, 'Droid Sans Fallback'",
    "editor.fontLigatures": true,
    "editor.fontSize": 12,
    "editor.fontWeight": "bold",
    //"editor.rename.enablePreview": false,
    // * * * * * * * * * * * * * * * * * * * * * * *
    // * * * E X T E N S I O N S  C O N F I G S * * *
    // * * * * * * * * * * * * * * * * * * * * * * *
    // enable extensions in untrusted mode
    "extensions.supportUntrustedWorkspaces": {
        "vscodevim.vim": {
            "supported": true,
            "version": "1.22.2"
        },
        "ms-vscode-remote.remote-ssh": {
            "supported": true,
            "version": "0.78.0"
        }
    },
    // * VIM EXTENSION
    "vim.easymotion": true,
    "vim.incsearch": true,
    "vim.useSystemClipboard": true,
    "vim.useCtrlKeys": true,
    "vim.hlsearch": true,
    "vim.insertModeKeyBindings": [
        {
            "before": [
                "j",
                "j"
            ],
            "after": [
                "<Esc>"
            ]
        }
    ],
    "vim.normalModeKeyBindingsNonRecursive": [
        {
            "before": [
                "<leader>",
                "d"
            ],
            "after": [
                "d",
                "d"
            ]
        },
        {
            "before": [
                "<C-n>"
            ],
            "commands": [
                ":nohl"
            ]
        },
        {
            "before": [
                "<leader>",
                "<space>"
            ],
            "commands": [
                ":nohl"
            ]
        }
    ],
    "vim.leader": ",",
    "vim.handleKeys": {
        "<C-a>": false,
        "<C-f>": true
    },
    // * AWS EXTENSION
    "aws.samcli.location": "",
    "aws.telemetry": false,
    "aws.cdk.explorer.enabled": false,
    // * REDHAT YAML EXTENSION
    // Custom tags for the parser to use/accept
    "yaml.customTags": [
        "!And",
        "!If",
        "!If sequence",
        "!Not",
        "!Equals",
        "!Or",
        "!FindInMap sequence",
        "!Base64",
        "!Cidr",
        "!Ref",
        "!Sub",
        "!Sub sequence",
        "!GetAtt",
        "!GetAZs",
        "!ImportValue",
        "!Select",
        "!Select sequence",
        "!Split",
        "!Join sequence"
    ],
    "workbench.editorAssociations": {
        "*.ipynb": "jupyter-notebook"
    },
    "notebook.cellToolbarLocation": {
        "default": "right",
        "jupyter-notebook": "left"
    },
    "terminal.external.osxExec": "iTerm.app",
    "editor.formatOnSave": true,
    "python.analysis.typeCheckingMode": "basic",
    "redhat.telemetry.enabled": false,
    "workbench.colorTheme": "Default Light Modern",
    "remote.SSH.enableX11Forwarding": false,
    "remote.SSH.enableAgentForwarding": false,
    "editor.minimap.enabled": false,
    "window.zoomLevel": 1,
    "workbench.activityBar.visible": false,
    "files.enableTrash": false,
    "files.trimTrailingWhitespace": true,
    "editor.accessibilitySupport": "off",
    //"window.zoomLevel": 1
}